<TeXmacs|2.1>

<style|generic>

<\body>
  <chapter|Limit>

  <section|Cone and Limit>

  In this section, we discuss an important application of universal element
  or representation: limit. We are to show that limit is a representation of
  a functor that generates objects called cones.

  Now, the problem turns to be why cones are important. Because many
  important mathematical concepts are turn out to be cones. Remember in
  chapter <reference|chapter: Category, Functor, and Natural Transformation>,
  we have embedded some concepts in the framework of category theory, such as
  supremum and infimum, Cartesian product and adjoint union. These concepts,
  once re-written by arrows, looks weird. You may wonder where these weird
  stuffs come from. In fact, they come from limit.

  To define limit, we have to first introduce diagram, and then cone.

  <subsection|Diagram as a part of category is a functor>

  When we were discussing category, functor, and natural transformation, we
  used the metaphor that a category is a collection of diagrams. Well, what
  is a diagram precisely? Naturally, a diagram is a part of a category, say
  <math|<math-ss|C>>. By part, we indicates two aspects: the set of dots
  (objects) in a diagram is a subset of the <math|ob<rsub|<math-ss|C>>>, and
  the set of arrows (morphisms) between dots <math|X> and <math|Y> is a
  subset of the <math|<math-ss|C><around*|(|X,Y|)>>.

  Remind that, in category theory, everything should be described by arrows.
  So, how to describe a diagram by arrows?

  Let us consider a simpler case: set theory, where a part simply means a
  finite subset. Such a subset of set <math|S> is written as
  <math|A\<assign\><around*|{|x<rsub|1>,\<ldots\>,x<rsub|n>|}>>, where
  <math|x<rsub|i>\<in\>S>. A set corresponds to a discrete category, and a
  function between sets to a functor between discrete categories. (A discrete
  category <math|<math-ss|C>> is that with
  <math|<math-ss|C><around*|(|X,X|)>=<around*|{|1<rsub|X>|}>> and
  <math|<math-ss|C><around*|(|X,Y|)>=\<varnothing\>> for each
  <math|X,Y\<in\><math-ss|C>>.) So, we are to describe <math|A> by function.
  A natural one is <math|f:I\<rightarrow\>S>, where
  <math|I\<assign\><around*|{|1,\<ldots\>,n|}>> as an \Pindexing set\Q, and
  <math|f<around*|(|i|)>\<assign\>x<rsub|i>>.

  Back to category theory, the indexing set analyzes to a small category
  <math|<math-ss|I>> called indexing category, and the function <math|f>
  analyzes to functor <math|F:<math-ss|I>\<rightarrow\><math-ss|C>>. Indexing
  category is used for filtering the objects and morphisms in
  <math|<math-ss|C>>, so that the image is a part of <math|<math-ss|C>>, that
  is, a diagram. We summarize the previous analysis as follow.

  <\definition>
    [Diagram] Let <math|<math-ss|I>> a small category and <math|<math-ss|C>>
    a category. An <math|<math-ss|I>>-shaped <with|font-series|bold|diagram>
    in <math|<math-ss|C>> is a functor <math|F:<math-ss|I>\<rightarrow\><math-ss|C>>.
    It is small or locally small if <math|<math-ss|C>> is small or locally
    small respectively.
  </definition>

  <subsection|Cone irradiates diagram>

  With diagram declared, we come to cone. A light cone generated by a table
  lamp irradiates the table. The table lamp is an object, and the table is a
  diagram. So, a cone irradiates a diagram.

  But, how can we describe the relation between an object and a diagram,
  which is a functor? To make this possible, we have to make the most boring
  definition so far: the constant functor. Constant functor converts an
  object to a functor.

  <\definition>
    [Constant Functor] Let <math|<math-ss|C>> and <math|<math-ss|D>>
    categories. For each <math|X\<in\><math-ss|D>>, the
    <with|font-series|bold|constant functor> of <math|X>,
    <math|Const<rsub|X>:<math-ss|C>\<rightarrow\><math-ss|D>>, is defined by

    <\itemize>
      <item>for each <math|A\<in\><math-ss|C>>,
      <math|Const<rsub|X><around*|(|A|)>=X>, and

      <item>for each <math|f:A\<rightarrow\>B>,
      <math|Const<rsub|X><around*|(|f|)>=1<rsub|X>>.
    </itemize>
  </definition>

  With this trivial definition, we can describe the relation between an
  object, or its constant functor, and a diagram.

  <\definition>
    [Cone] For each diagram <math|D:<math-ss|I>\<rightarrow\><math-ss|C>> and
    each object <math|X\<in\><math-ss|C>>, a cone from <math|X> to <math|D>
    is a natural transformation <math|\<lambda\>:Const<rsub|X>\<rightarrow\>D>.
  </definition>

  <big-figure|<image|figures/cone.png|0.75par|||>|<label|figure: Cone> The
  left hand side indicates the indexing category <math|<math-ss|I>>. And the
  right hand side indicates the cone from <math|X> to <math|D>. The green
  arrows are for functor <math|Const<rsub|X>>, and the red ones for functor
  <math|D>, wherein maps on morphisms are not shown. As usual, identities are
  hidden. Since the <math|\<lambda\>> is a natural transformation, the right
  hand side commutes.>

  <subsection|Cone functor generates cones>

  Notice a cone consists two parts: the diagram and the summit object. Given
  a diagram <math|D:<math-ss|I>\<rightarrow\><math-ss|C>> and a summit object
  <math|X\<in\><math-ss|C>>, the natural transformation
  <math|\<lambda\>:Const<rsub|X>\<rightarrow\>D> is not unique. There can be
  a plenty of such natural transformations, depending on how many morphisms
  there are between objects in <math|<math-ss|C>>. We can collect these
  natural transformations together as a set, <math|Cone<around*|(|X,D|)>>.

  For the set of morphisms from <math|X> to <math|Y>,
  <math|<math-ss|C><around*|(|X,Y|)>>, we constructed a functor
  <math|<math-ss|C><around*|(|-,Y|)>:<math-ss|C><rsup|op>\<rightarrow\><math-ss|Set>>.
  The same goes for <math|Cone<around*|(|X,D|)>>. We can construct a functor
  <math|Cone<around*|(|-,D|)>:<math-ss|C><rsup|op>\<rightarrow\><math-ss|Set>>.
  Naturally, it maps <math|X\<in\><math-ss|C>> to
  <math|Cone<around*|(|X,D|)>>, but what about the morphism, say
  <math|f:Y\<rightarrow\>X>? Consider a cone
  <math|\<lambda\>\<in\>Cone<around*|(|X,D|)>>, which is a natural
  transformation from <math|Const<rsub|X>:<math-ss|I>\<rightarrow\><math-ss|C>>
  to <math|D:<math-ss|I>\<rightarrow\><math-ss|C>>. A component
  <math|\<lambda\><rsub|A>:X\<rightarrow\>D<around*|(|A|)>>. To construct a
  morphism <math|Y\<rightarrow\>D<around*|(|A|)>> out of
  <math|\<lambda\><rsub|A>> and <math|f>, the only possibility is
  <math|Y<above|\<rightarrow\>|f>X<above|\<rightarrow\>|\<lambda\><rsub|A>>D<around*|(|A|)>>,
  that is <math|\<lambda\><rsub|A>\<circ\>f>.

  <\definition>
    [Cone Functor] For each diagram <math|D:<math-ss|I>\<rightarrow\><math-ss|C>>,
    the <with|font-series|bold|cone functor>
    <math|Cone<around*|(|-,D|)>:<math-ss|C><rsup|op>\<rightarrow\><math-ss|Set>>
    is defined by

    <\itemize>
      <item>for each <math|X\<in\><math-ss|C>>, mapping <math|X> to
      <math|Cone<around*|(|X,D|)>>, the set of all cones from <math|X> to
      <math|D>, and

      <item>for each <math|f:Y\<rightarrow\>X>, mapping <math|f> to function
      <math|f<rsup|\<ast\>>:Cone<around*|(|X,D|)>\<rightarrow\>Cone<around*|(|Y,D|)>>
      defined by <math|f<rsup|\<ast\>><around*|(|\<lambda\><rsub|A>|)>=\<lambda\><rsub|A>\<circ\>f>
      for each component <math|\<lambda\><rsub|A>>. (See also figure
      <reference|figure: Cone Functor>.)
    </itemize>
  </definition>

  <big-figure|<image|figures/cone-1.png|0.5par|||>|<label|figure: Cone
  Functor> Indicates the map on <math|f>. As an instance, the indexing
  category <math|<math-ss|I>> is simply <math|A<above|\<rightarrow\>|g>B>.>

  <subsection|Limit is the representation of cone functor>

  As discussed in section <reference|section: From Representability to
  Universality>, for a locally small category <math|<math-ss|C>>, a functor
  <math|F:<math-ss|C><rsup|op>\<rightarrow\><math-ss|Set>> can be represented
  by an object in <math|<math-ss|C>>, if universal element exists. Given a
  diagram <math|D:<math-ss|I>\<rightarrow\><math-ss|C>> where
  <math|<math-ss|C>> is locally small (or say, a locally small diagram), a
  cone functor <math|Cone<around*|(|-,D|)>:<math-ss|C><rsup|op>\<rightarrow\><math-ss|Set>>
  thus can be represented by an object in <math|<math-ss|C>>, which we call
  the limit of <math|D>, if universal cone exists.

  Let us restate the universal element for cone functor, which is the
  universal cone. We copy definition <reference|definition: Universal
  Element> to here, with some replacement for cone functor.

  <\definition>
    [Universal Cone] For a locally small diagram
    <math|D:<math-ss|I>\<rightarrow\><math-ss|C>>, a
    <with|font-series|bold|universal cone> is a pair
    <math|><math|<around*|(|lim<rsub|<math-ss|I>>D,e|)>> where <math|lim
    D\<in\><math-ss|C>> and <math|e\<in\>Cone<around*|(|lim<rsub|<math-ss|I>>D,D|)>>
    such that for each <math|X\<in\><math-ss|C>> and
    <math|\<lambda\>\<in\>Cone<around*|(|X,D|)>>, there is a unique morphism
    <math|f:X\<rightarrow\>lim<rsub|<math-ss|I>>D> such that
    <math|\<lambda\>=f<rsup|\<ast\>><around*|(|e|)>>. The
    <math|lim<rsub|<math-ss|I>>D> is called the <with|font-series|bold|limit>
    of <math|D>. (See also figure <reference|figure: Limit>.)
  </definition>

  <big-figure|<image|figures/limit.png|0.5par|||>|<label|figure: Limit>
  Indicates the limit. The dash arrow is for implication. As an instance, the
  indexing category <math|<math-ss|I>> is simply
  <math|A<above|\<rightarrow\>|g>B>.>

  As figure <reference|figure: Limit> indicates, the limit is the lowest
  object towards (the image of) the diagram. So, a limit is the closest
  object to the diagram, thus literally a limit.

  The dual limit is colimit, by simply exchanging domain and codomain in
  limit. As figure <reference|figure: Colimit> shows.

  \ <big-figure|<image|figures/colimit.png|0.5par|||>|<label|figure: Colimit>
  Indicates the colimit. The dash arrow is for implication. As an instance,
  the indexing category <math|<math-ss|I>> is simply
  <math|A<above|\<rightarrow\>|g>B>.>

  Since representation of a functor, if exists, is unique up to isomorphism,
  the limit and colimit, which are representation of the cone and cocone
  functor respectively, are unique up to isomorphism.

  <\theorem>
    [Limit (Colimit) is Unique] The limit (colimit) of a locally small
    diagram is unique up to isomorphism.
  </theorem>

  <subsection|Infimum is a limit on poset <math|\<bbb-R\>>>

  In section <reference|section: Supremum and infimum are dual>, we roughly
  showed what infimum would be like in the framework of category theory.
  Here, we make it more precise. Recalling the definition of poset (see
  definition <reference|definition: Poset>), the field <math|\<bbb-R\>> forms
  a poset by preorder <math|\<leqslant\>>. So, it forms a poset category
  <math|<math-ss|Poset>>, with object a real number and morphism
  <math|x\<rightarrow\>y> if <math|x\<leqslant\>y>. Consider an indexing
  category <math|<math-ss|I>> as the poset
  <math|<around*|(|A,\<leqslant\>|)>> where <math|A\<subset\>\<bbb-R\>>.
  Diagram <math|D:<math-ss|I>\<rightarrow\>\<bbb-R\>> is defined by
  <math|D<around*|(|x|)>\<assign\>x> for each <math|x\<in\>\<bbb-R\>>. So,
  <math|lim<rsub|<math-ss|I>>D> has the property that, for each
  <math|x\<in\>\<bbb-R\>> and <math|a\<in\>A>, if
  <math|x\<leqslant\>D<around*|(|a|)>>, then
  <math|x\<leqslant\>lim<rsub|<math-ss|I>>D\<leqslant\>D<around*|(|a|)>>.
  This means <math|lim<rsub|<math-ss|I>>D> is the infimum of the set
  <math|A>. So, infimum is a universal cone, or a limit, on poset category.

  Since limit, or generally representation, is unique up to isomorphism,
  infimum and supremum of a subset of <math|\<bbb-R\>> is unique. (Recall
  that the only isomorphism in poset <math|\<bbb-R\>> is
  <math|x\<leqslant\>x> for each <math|x\<in\>\<bbb-R\>>.)

  The same goes for its dual, supremum. If we flip the arrows in the
  definitions of limit, we get the dual, colimit . So, directly, we find
  supremum is the colimit on <math|<math-ss|Poset>>.

  <subsection|Product is a limit with discrete indexing category>

  In section <reference|section: Arrows generalize concepts and theorems from
  one area to every area in mathematics>, we showed what Cartesian product
  would be like in the framework of category theory. Let <math|<math-ss|C>> a
  category. For any <math|A,B\<in\><math-ss|C>>, the product of <math|A> and
  <math|B> is another object <math|C\<in\><math-ss|C>> together with two
  morphisms <math|\<alpha\>:C\<rightarrow\>A> and
  <math|\<beta\>:C\<rightarrow\>B> such that, for any
  <math|C<rprime|'>\<in\><math-ss|C>>, any
  <math|\<alpha\><rprime|'>:C<rprime|'>\<rightarrow\>A> and
  <math|\<beta\><rprime|'>:C<rprime|'>\<rightarrow\>B>, there exists a unique
  morphism <math|\<gamma\>:C<rprime|'>\<rightarrow\>C> so that
  <math|\<alpha\><rprime|'>=\<alpha\>\<circ\>\<gamma\>> and
  <math|\<beta\><rprime|'>=\<beta\>\<circ\>\<gamma\>>. If we convert this
  statement to commutative diagram (figure <reference|figure: Product is
  Limit>), then it is apparent that product is a limit, in which the discrete
  category with two elements is the indexing category.

  <big-figure|<image|figures/limit-1.png|0.75par|||>|<label|figure: Product
  is Limit> Indicates that product is a limit. The left hand side is the
  indexing category. There is no morphism (except the hidden identities)
  since it is a discrete category. The name of the object is irrelevant, so
  the two objects are shown as dots. The right hand side is the commutative
  diagram for the definition of product. The green arrows is for the constant
  functor, and red arrows for the diagram functor.>

  Again, since representation of a functor is unique up to isomorphism. The
  product is unique up to isomorphism. Recall that we have proved the
  uniqueness before. Now, the proof is apparent on its own.

  The same goes for coproduct (definition <reference|definition: Coproduct of
  Two Objects>).

  <section|Drafts>

  Let us see how adjoint functors preserve representation in an explicit
  instance. We have known that limit represents cone functor, and product is
  a limit. So, product is a representation. Figure <reference|figure: Adjoint
  functors preserve product> illustrates how the adjoint functors
  <math|F\<dashv\>G> preserve the product
  <math|<around*|(|A\<times\>B,\<alpha\>,\<beta\>|)>>.

  <big-figure|<image|figures/adjoint-4.png|0.7par|||>|<label|figure: Adjoint
  functors preserve product> Illustrates how the product is preserved by
  adjoint functors <math|F\<dashv\>G>, where
  <math|F:<math-ss|C>\<rightarrow\><math-ss|D>> and
  <math|G:<math-ss|D>\<rightarrow\><math-ss|C>>. The red part indicates that
  <math|A\<times\>B> is the product of <math|A> and <math|B> in
  <math|<math-ss|D>>. The blue part indicates that
  <math|\<varepsilon\><rsub|A\<times\>B>> is universal. By putting the red
  and blue parts together, we find the relation
  <math|f=F<around*|(|f<rsup|\<sharp\>>|)>\<circ\>\<varepsilon\><rsub|A\<times\>B>>.>
</body>

<\initial>
  <\collection>
    <associate|page-medium|paper>
  </collection>
</initial>

<\references>
  <\collection>
    <associate|auto-1|<tuple|1|1|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|auto-10|<tuple|4|3|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|auto-11|<tuple|1.5|4|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|auto-12|<tuple|1.6|4|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|auto-13|<tuple|5|4|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|auto-14|<tuple|2|?|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|auto-15|<tuple|6|?|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|auto-2|<tuple|1|1|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|auto-3|<tuple|1.1|1|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|auto-4|<tuple|1.2|1|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|auto-5|<tuple|1|2|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|auto-6|<tuple|1.3|2|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|auto-7|<tuple|2|2|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|auto-8|<tuple|1.4|3|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|auto-9|<tuple|3|3|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|figure: Adjoint functors preserve
    product|<tuple|6|?|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|figure: Colimit|<tuple|4|3|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|figure: Cone|<tuple|1|2|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|figure: Cone Functor|<tuple|2|2|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|figure: Limit|<tuple|3|3|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
    <associate|figure: Product is Limit|<tuple|5|4|../../../.TeXmacs/texts/scratch/no_name_3.tm>>
  </collection>
</references>

<\auxiliary>
  <\collection>
    <\associate|figure>
      <tuple|normal|<surround|<hidden-binding|<tuple>|1>|| The left hand side
      indicates the indexing category <with|mode|<quote|math>|<rigid|<with|mode|<quote|text>|<with|font-family|<quote|ss>|font-shape|<quote|right>|I>>>>.
      And the right hand side indicates the cone from
      <with|mode|<quote|math>|X> to <with|mode|<quote|math>|D>. The green
      arrows are for functor <with|mode|<quote|math>|Const<rsub|X>>, and the
      red ones for functor <with|mode|<quote|math>|D>, wherein maps on
      morphisms are not shown. As usual, identities are hidden. Since the
      <with|mode|<quote|math>|\<lambda\>> is a natural transformation, the
      right hand side commutes.>|<pageref|auto-5>>

      <tuple|normal|<surround|<hidden-binding|<tuple>|2>|| Indicates the map
      on <with|mode|<quote|math>|f>. As an instance, the indexing category
      <with|mode|<quote|math>|<rigid|<with|mode|<quote|text>|<with|font-family|<quote|ss>|font-shape|<quote|right>|I>>>>
      is simply <with|mode|<quote|math>|A<above|\<rightarrow\>|g>B>.>|<pageref|auto-7>>

      <tuple|normal|<surround|<hidden-binding|<tuple>|3>|| Indicates the
      limit. The dash arrow is for implication. As an instance, the indexing
      category <with|mode|<quote|math>|<rigid|<with|mode|<quote|text>|<with|font-family|<quote|ss>|font-shape|<quote|right>|I>>>>
      is simply <with|mode|<quote|math>|A<above|\<rightarrow\>|g>B>.>|<pageref|auto-9>>

      <tuple|normal|<surround|<hidden-binding|<tuple>|4>|| Indicates the
      colimit. The dash arrow is for implication. As an instance, the
      indexing category <with|mode|<quote|math>|<rigid|<with|mode|<quote|text>|<with|font-family|<quote|ss>|font-shape|<quote|right>|I>>>>
      is simply <with|mode|<quote|math>|A<above|\<rightarrow\>|g>B>.>|<pageref|auto-10>>

      <tuple|normal|<surround|<hidden-binding|<tuple>|5>|| Indicates that
      product is a limit. The left hand side is the indexing category. There
      is no morphism (except the hidden identities) since it is a discrete
      category. The name of the object is irrelevant, so the two objects are
      shown as dots. The right hand side is the commutative diagram for the
      definition of product. The green arrows is for the constant functor,
      and red arrows for the diagram functor.>|<pageref|auto-13>>
    </associate>
    <\associate|toc>
      <vspace*|2fn><with|font-series|<quote|bold>|math-font-series|<quote|bold>|font-size|<quote|1.19>|1<space|2spc>Limit>
      <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>>
      <no-break><pageref|auto-1><vspace|1fn>

      <vspace*|1fn><with|font-series|<quote|bold>|math-font-series|<quote|bold>|1<space|2spc>Cone
      and Limit> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>>
      <no-break><pageref|auto-2><vspace|0.5fn>

      <with|par-left|<quote|1tab>|1.1<space|2spc>Diagram as a part of
      category is a functor <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>>
      <no-break><pageref|auto-3>>

      <with|par-left|<quote|1tab>|1.2<space|2spc>Cone irradiates diagram
      <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>>
      <no-break><pageref|auto-4>>

      <with|par-left|<quote|1tab>|1.3<space|2spc>Cone functor generates cones
      <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>>
      <no-break><pageref|auto-6>>

      <with|par-left|<quote|1tab>|1.4<space|2spc>Limit is the representation
      of cone functor <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>>
      <no-break><pageref|auto-8>>

      <with|par-left|<quote|1tab>|1.5<space|2spc>Infimum is a limit on poset
      <with|mode|<quote|math>|\<bbb-R\>> <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>>
      <no-break><pageref|auto-11>>

      <with|par-left|<quote|1tab>|1.6<space|2spc>Product is a limit with
      discrete indexing category <datoms|<macro|x|<repeat|<arg|x>|<with|font-series|medium|<with|font-size|1|<space|0.2fn>.<space|0.2fn>>>>>|<htab|5mm>>
      <no-break><pageref|auto-12>>
    </associate>
  </collection>
</auxiliary>